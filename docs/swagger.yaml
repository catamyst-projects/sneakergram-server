swagger: '2.0'
info:
  description: 'This is a sample server.'
  version: '1.0.0'
  title: 'Project Auth Express'
  license:
    name: 'MIT'
    url: 'https://opensource.org/licenses/MIT'
host: 'api.haidar.dev'
basePath: '/'
tags:
  - name: 'Index'
    description: 'Generic operations'
  - name: 'User'
    description: 'Operations about user'
schemes:
  - 'https'
  - 'http'
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization
paths:
  /:
    get:
      tags:
        - 'Index'
      summary: 'Home index'
      operationId: 'index'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Got index'
  /users/seed:
    post:
      tags:
        - 'User'
      summary: 'Seed inital users data'
      description: ''
      operationId: 'seedUsers'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Seed initial users'
  /users/register:
    post:
      tags:
        - 'User'
      summary: 'Register new user'
      operationId: 'registerUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '200':
          description: 'Registered new user'
  /users/login:
    post:
      tags:
        - 'User'
      summary: 'Login existing user'
      operationId: 'loginUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: 'haidar@haidar.com'
              password:
                type: string
                example: 'haidarhaidar'
      responses:
        200:
          description: 'Logged in to existing user'
  /users/validate:
    get:
      tags:
        - 'User'
      summary: 'Validate authenticated user'
      description: ''
      operationId: 'validateUser'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Validated authenticated user'
      security:
        - JWT: []
  /users/profile:
    get:
      tags:
        - 'User'
      summary: 'Get authenticated user profile'
      description: ''
      operationId: 'getUserProfile'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Get user profile'
      security:
        - JWT: []
  /users/search:
    get:
      tags:
        - 'User'
      summary: 'Search user by name'
      description: ''
      operationId: 'searchUserByName'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Searched user by name'
      parameters:
        - name: 'name'
          in: 'query'
          description: 'The name keyword to search'
          required: true
          type: 'string'
  /users:
    get:
      tags:
        - 'User'
      summary: 'Get all users'
      operationId: 'getAllUsers'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'Got all users'
    delete:
      tags:
        - 'User'
      summary: 'Delete all sers'
      operationId: 'deleteAllUsers'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Deleted all users'
      security:
        - JWT: []
  /users/{id}:
    get:
      tags:
        - 'User'
      summary: 'Get user by id'
      description: ''
      operationId: 'getUserById'
      produces:
        - 'application/json'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'The id that needs to be fetched.'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'Got one user by id'
          schema:
            $ref: '#/definitions/User'
        404:
          description: 'Failed to get. User by id not found'
    delete:
      tags:
        - 'User'
      summary: 'Delete user'
      operationId: 'deleteUserById'
      produces:
        - 'application/json'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'The id that needs to be deleted'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'Deleted one user by id'
        404:
          description: 'Failed to delete. User by id not found'
      security:
        - JWT: []
definitions:
  NewUser:
    type: 'object'
    properties:
      name:
        type: 'string'
        example: 'M Haidar Hanif'
      email:
        type: 'string'
        format: 'email'
        example: 'haidar@haidar.com'
      password:
        type: 'string'
        example: 'haidarhaidar'
  User:
    type: 'object'
    properties:
      __v:
        type: integer
        example: 0
      _id:
        type: string
        example: '5e8dca8d46afac0017c7786c'
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: string
        example: 'M Haidar Hanif'
      email:
        type: string
        format: 'email'
        example: 'haidar@haidar.com'
      salt:
        type: string
        example: 'HIDDEN_SALT'
      password:
        type: string
        example: 'HIDDEN_PASSWORD'
      createdAt:
        type: string
        format: date
        example: '2020-04-08T14:41:04.685Z'
      updatedAt:
        type: string
        format: date
        example: '2020-04-08T14:41:04.685Z'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
